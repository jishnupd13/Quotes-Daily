trigger:
  branches:
    include:
      - development   # Trigger only on development branch

pool:
  name: Default   # Self-hosted Mac agent

resources:
  repositories:
    - repository: appiumTests
      type: git
      name: "Quotes Daily/Qoutes_Daily_Appium"

jobs:
  # Job 1: Build Release APK and publish artifact
  - job: BuildReleaseAPK
    displayName: "Build Release APK"
    pool:
      name: Default
    steps:
      # Clean checkout of main repo
      - checkout: self
        clean: true

      # Gradle build for APK
      - task: Gradle@2
        inputs:
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          tasks: 'assembleRelease'

      # Publish APK artifact
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'app/build/outputs/apk/release/app-release.apk'
          ArtifactName: 'releaseApk'
          publishLocation: 'Container'

  # Job 2: Run Appium Tests
  - job: RunAppiumTests
    displayName: "Run Appium Tests"
    dependsOn: BuildReleaseAPK
    pool:
      name: Default
    steps:
      # Checkout main repo
      - checkout: self
        clean: true
        path: 'main'

      # Checkout Appium tests repository
      - checkout: appiumTests
        clean: true
        path: 'appium'

      # Download the built APK artifact
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'releaseApk'
          downloadPath: '$(System.ArtifactsDirectory)'

      # Setup Java for Appium tests
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
        displayName: 'Setup Java 11'

      # List directories to debug the checkout
      - script: |
          echo "Build.SourcesDirectory contents:"
          ls -la $(Build.SourcesDirectory)
          echo "Looking for Java/Maven project files..."
          find $(Build.SourcesDirectory) -name "pom.xml" -type f
          find $(Build.SourcesDirectory) -name "build.gradle*" -type f
          echo "All directories in Build.SourcesDirectory:"
          find $(Build.SourcesDirectory) -type d -maxdepth 2
        displayName: 'Debug: List directories and find project files'

      # Find and prepare Appium test directory
      - script: |
          echo "Looking for Appium test directory..."
          # Check common directory names for the Appium repository
          APPIUM_DIR=""
          if [ -d "$(Build.SourcesDirectory)/appium" ]; then
            APPIUM_DIR="$(Build.SourcesDirectory)/appium"
          elif [ -d "$(Build.SourcesDirectory)/Qoutes_Daily_Appium" ]; then
            APPIUM_DIR="$(Build.SourcesDirectory)/Qoutes_Daily_Appium"
          else
            # Find any directory that contains pom.xml or build.gradle
            APPIUM_DIR=$(find $(Build.SourcesDirectory) -name "pom.xml" -o -name "build.gradle*" | head -1 | xargs dirname)
          fi
          
          if [ -n "$APPIUM_DIR" ] && [ -d "$APPIUM_DIR" ]; then
            echo "Found Appium directory: $APPIUM_DIR"
            echo "##vso[task.setvariable variable=APPIUM_TEST_DIR]$APPIUM_DIR"
            echo "Directory contents:"
            ls -la "$APPIUM_DIR"
          else
            echo "Could not find Appium test directory"
            exit 1
          fi
        displayName: 'Find Appium Test Directory'

      # Run Appium tests
      - script: |
          # Set APK path for tests
          export APK_PATH="$(System.ArtifactsDirectory)/releaseApk/app-release.apk"
          echo "APK Path: $APK_PATH"
          echo "Working in directory: $(APPIUM_TEST_DIR)"
          cd "$(APPIUM_TEST_DIR)"
          
          # Check for Maven or Gradle project
          if [ -f "pom.xml" ]; then
            echo "Found Maven project (pom.xml)"
            echo "Running Maven tests..."
            mvn clean test -Dapp.path="$APK_PATH"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "Found Gradle project"
            echo "Running Gradle tests..."
            ./gradlew clean test -Dapp.path="$APK_PATH"
          else
            echo "No recognized Java build file found (pom.xml or build.gradle)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
        displayName: 'Run Appium Tests'

      # Publish test results (optional - adjust based on your test output format)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: |
            **/target/surefire-reports/TEST-*.xml
            **/build/test-results/test/TEST-*.xml
          searchFolder: '$(APPIUM_TEST_DIR)'
        displayName: 'Publish Test Results'