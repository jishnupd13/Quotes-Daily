trigger:
  branches:
    include:
      - development   # Trigger only on development branch

pool:
  name: Default   # Self-hosted Mac agent

resources:
  repositories:
    - repository: appiumTests
      type: git
      name: "Quotes Daily/Qoutes_Daily_Appium"

jobs:
  # Job 1: Build Release APK and publish artifact
  - job: BuildReleaseAPK
    displayName: "Build Release APK"
    pool:
      name: Default
    steps:
      # Clean checkout of main repo
      - checkout: self
        clean: true

      # Gradle build for APK
      - task: Gradle@2
        inputs:
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          tasks: 'assembleRelease'

      # Publish APK artifact
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'app/build/outputs/apk/release/app-release.apk'
          ArtifactName: 'releaseApk'
          publishLocation: 'Container'

  # Job 2: Run Appium Tests
  - job: RunAppiumTests
    displayName: "Run Appium Tests"
    dependsOn: BuildReleaseAPK
    pool:
      name: Default
    steps:
      # Checkout main repo
      - checkout: self
        clean: true
        path: 'main'

      # Checkout Appium tests repository
      - checkout: appiumTests
        clean: true
        path: 'appium'

      # Download the built APK artifact
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'releaseApk'
          downloadPath: '$(System.ArtifactsDirectory)'

      # Install dependencies (assuming Node.js/npm for Appium)
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
        displayName: 'Install Node.js'

      # List directories to debug the checkout
      - script: |
          echo "Build.SourcesDirectory contents:"
          ls -la $(Build.SourcesDirectory)
          echo "Looking for Appium repository..."
          find $(Build.SourcesDirectory) -name "package.json" -type f
        displayName: 'Debug: List directories'

      # Install Appium and dependencies
      - script: |
          # Check if package.json exists
          if [ -f "package.json" ]; then
            echo "Found package.json, installing dependencies..."
            npm install -g appium
            npm install
          else
            echo "package.json not found in current directory"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
        displayName: 'Install Appium and dependencies'
        workingDirectory: '$(Build.SourcesDirectory)/appium'

      # Run Appium tests
      - script: |
          # Set APK path for tests
          export APK_PATH="$(System.ArtifactsDirectory)/releaseApk/app-release.apk"
          echo "APK Path: $APK_PATH"
          # Check if package.json has test script
          if [ -f "package.json" ]; then
            if npm run | grep -q "test"; then
              echo "Running npm test..."
              npm test
            else
              echo "No test script found in package.json"
              echo "Available scripts:"
              npm run
              # Try alternative test commands
              if [ -f "test.js" ]; then
                node test.js
              elif [ -d "test" ]; then
                echo "Test directory found, but no npm test script"
              fi
            fi
          else
            echo "No package.json found, cannot run tests"
            exit 1
          fi
        displayName: 'Run Appium Tests'
        workingDirectory: '$(Build.SourcesDirectory)/appium'

      # Publish test results (optional - adjust based on your test output format)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-results.xml'
          searchFolder: '$(Build.SourcesDirectory)/appium'
        displayName: 'Publish Test Results'